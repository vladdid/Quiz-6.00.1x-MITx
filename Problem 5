PROBLEM 5  (10.0/10.0 points)
Suppose you are given two strings (they may be empty), s1 and s2. You would like to "lace" these strings together, by successively alternating elements of each string (starting with the first character of s1). If one string is longer than the other, then the remaining elements of the longer string should simply be added at the end of the new string. For example, if we lace 'abcd' and 'efghi', we would get the new string: 'aebfcgdhi'.

Write an iterative procedure, called laceStrings(s1, s2) that does this.

Note: Part of what we are testing on this exam is your ability to write comprehensive test suites for your own functions. Thus, we are only providing the specification for the problem and we will not be showing you test case outputs. You will be able to check your code in the following box for syntax errors; once your code runs without syntax errors on our server, your grade will be recorded. So be sure to thoroughly test your function before pasting it here. You will only get ten checks to correct syntax errors. Use these judiciously; we regret that we are unable to give you more than 10 checks.

Answer:

def laceStrings(s1, s2):
    """
    s1 and s2 are strings.

    Returns a new str with elements of s1 and s2 interlaced,
    beginning with s1. If strings are not of same length, 
    then the extra elements should appear at the end.
    """
    join = []
    smaller = min(s1, s2, key=len)
    for num in range(len(smaller)):
        join.append(s1[num])
        join.append(s2[num])
    join = ''.join(join)
    if len(s1) != len(s2):
        smaller = len(smaller)
        join = join + max(s1, s2, key=len)[smaller:]
    return join
